var pipeLen;
var speed;
var gravPower;
var jumpPower;

var stop = 0;
var del = 0;
var score = 1;
var rot = 1;

var rect1;
var op1;
var rect2;
var op2;

var sky = new Rectangle(getWidth(), getHeight());
sky.setPosition(0,0);
sky.setColor('#9ad5ff');
add(sky);

var fList = [];
var rList = [];

var fBod = new Oval(70, 50);
fBod.setPosition(100, getHeight()/2);
fBod.setColor('#ffce1f');
add(fBod);
fList.push(fBod);

var fEye1 = new Oval(33, 20);
fEye1.setPosition(120, getHeight()/2-10);
fEye1.setColor('white');
fEye1.setRotation(37);
add(fEye1);
fList.push(fEye1);

var fEye2 = new Oval(13, 10);
fEye2.setPosition(120, getHeight()/2-10);
fEye2.setRotation(70);
add(fEye2);
fList.push(fEye2);

var fBeak1 = new Oval(36, 20);
fBeak1.setPosition(130, getHeight()/2+10);
fBeak1.setColor('#fd6c2f');
add(fBeak1);
fList.push(fBeak1);

var fBeak2 = new Line(112, getHeight()/2+10, 148, getHeight()/2+10);
add(fBeak2);
fList.push(fBeak2);

var fBox = new Rectangle(83, 50);
fBox.setPosition(65, getHeight()/2-25);
fList.push(fBox);

var end = new Text('Score: 0', '30pt Arial');
end.setColor('#fd6c2f');
end.setPosition(90, 50);

function start(){
    var bool = readBoolean('Do you want to enter advanced mode? (Customize speed, gap, etc.)');
    advancedMode(bool);
    console.log("Welcome to Flappy JS! Press any key to jump. Get through the pipes and get the highest score!");
    setTimer(gravity, 1);
    keyDownMethod(jumpStarter);
    pipeMaker();
    setTimer(pipeMaker, 25000/(speed));
    setTimer(scoreCount, 25000/(speed));
    setTimer(hitboxUpdate, 1);
}

function advancedMode(bool){
    if(bool){
        pipeLen = readFloat('Pick the length of the gap between the pipes! (155 default, Flappy needs at least 125)');
        speed = readFloat('Pick the speed at which Flappy flies forward! (5 default)');
        gravPower = readFloat('Pick the speed at which Flappy falls! (2.5 default)');
        jumpPower = readFloat('Pick the speed at which Flappy jumps! (10 default)');
    } else {
        pipeLen = 155;
        speed = 5;
        gravPower = 2.5;
        jumpPower = 10;
    }
}

function jumpMotion(){
    if(del <= 100 && stop == 0){
        for(var i = 0; i < fList.length; i++){
            fList[i].move(0, -(jumpPower));    
        }
        del += jumpPower;
    }
}

function jumpStarter(){
    stopTimer(jumpMotion);
    del = 0;
    setTimer(jumpMotion, 1);
}

function gravity(){
    for(var i = 0; i < fList.length; i++){
        fList[i].move(0, gravPower);
    }
}

function pipeMaker(){
    var gap = Randomizer.nextInt(0, getHeight()-pipeLen);
    
    rect1 = new Rectangle(60, gap);
    rect1.setPosition(getWidth()-100, 0);
    rect1.setColor('#248a35');
    rList.push(rect1);
    add(rect1);
    
    op1 = new Rectangle(80, 40);
    op1.setPosition(getWidth()-110, gap-40);
    op1.setColor('#248a35');
    rList.push(op1);
    add(op1);
    
    rect2 = new Rectangle(60, getHeight()-gap-pipeLen);
    rect2.setPosition(getWidth()-100, pipeLen+gap);
    rect2.setColor('#248a35');
    rList.push(rect2);
    add(rect2);
    
    op2 = new Rectangle(80, 40);
    op2.setPosition(getWidth()-110, gap+pipeLen);
    op2.setColor('#248a35');
    rList.push(op2);
    add(op2);

    add(end);
}

function hitboxUpdate(){
    var hList = [fBox, rect1, op1, rect2, op2];
    pipeMover(hList);
}

function pipeMover(hList){
    if(groundCheck()){
        gameOver();
    }
    if(overlaps(hList[0], hList[1], hList[2])){
        gameOver();
    }
    if(overlaps(hList[0], hList[3], hList[4])){
        gameOver();
    }
    if(score < 6){
        for(var i = 0; i < rList.length; i++){
            rList[i].move(-1/5 * speed, 0);
        }
    } else if (score < 11){
        for(var i = 0; i < rList.length; i++){
            rList[i].move(-1.3/5 * speed, 0);
        }
    } else {
        for(var i = 0; i < rList.length; i++){
            rList[i].move(-1.6/5 * speed, 0);
        }
    }
}

function overlaps(x, y, z){
    var l1 = x.getX() >= (z.getX()+z.getWidth()) || z.getX() >= (x.getX()+x.getWidth());
    var l2 = x.getY() >= (y.getY()+y.getHeight()) || y.getY() >= (x.getY()+x.getHeight());
    var l3 = l1 || l2;
    return !l3;
}

function groundCheck(){
    var l1 = (fBox.getY()+fBox.getHeight()) > getHeight();
    return l1;
}

function gameOver(){
    stop = 1;
    stopTimer(gravity);
    stopTimer(pipeMaker);
    stopTimer(hitboxUpdate);
    stopTimer(scoreCount);
    setTimer(endAni, 1);
    end.setText('Game Over!');
}

function scoreCount(){
    end.setText('Score: ' + score);
    score += 1;
    add(end);
}

function endAni(){
    for(var i = 0; i < fList.length; i++){
        fList[i].setRotation(4*rot);
        fList[i].move(0, 3);
    }
    rot += 1;
}
